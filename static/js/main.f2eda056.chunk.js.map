{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","coins","setCoins","useState","searchTerm","setSearchTerm","currentPage","setCurrentPage","coinsPerPage","goToPage","setGoToPage","useEffect","axios","get","then","response","data","catch","error","console","filteredCoins","filter","coin","name","toLowerCase","includes","symbol","offset","currentCoins","slice","pageCount","Math","ceil","length","React","createElement","className","type","placeholder","value","onChange","e","target","map","key","id","ReactPaginate","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","_ref","selected","forcePage","containerClassName","activeClassName","min","max","onClick","handleGoToPageSubmit","pageNumber","Number","alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yPAuGeA,MAlGHA,KACV,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAYC,GAAiBF,mBAAS,KACtCG,EAAaC,GAAkBJ,mBAAS,IACxCK,GAAgBL,mBAAS,KACzBM,EAAUC,GAAeP,mBAAS,IAEzCQ,oBAAU,KACRC,IAAMC,IAAI,+CACPC,KAAKC,GAAYb,EAASa,EAASC,OACnCC,MAAMC,GAASC,QAAQD,MAAM,uBAAwBA,KACvD,IAEH,MAkBME,EAAgBnB,EAAMoB,OAAOC,GACjCA,EAAKC,KAAKC,cAAcC,SAASrB,EAAWoB,gBAC5CF,EAAKI,OAAOF,cAAcC,SAASrB,EAAWoB,gBAG1CG,EAASrB,EAAcE,EACvBoB,EAAeR,EAAcS,MAAMF,EAAQA,EAASnB,GACpDsB,EAAYC,KAAKC,KAAKZ,EAAca,OAASzB,GAMnD,OACE0B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,8BACZC,MAAOnC,EACPoC,SAtCsBC,IAC1BpC,EAAcoC,EAAEC,OAAOH,OACvBhC,EAAe,MAsCb2B,IAAAC,cAAA,aACED,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,MACJD,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,YAGRD,IAAAC,cAAA,aACGP,EAAae,IAAIrB,GAChBY,IAAAC,cAAA,MAAIS,IAAKtB,EAAKuB,IACZX,IAAAC,cAAA,UAAKb,EAAKuB,IACVX,IAAAC,cAAA,UAAKb,EAAKC,MACVW,IAAAC,cAAA,UAAKb,EAAKI,YAKlBQ,IAAAC,cAACW,IAAa,CACZC,cAAe,WACfC,UAAW,OACXC,WAAY,MACZnB,UAAWA,EACXoB,qBAAsB,EACtBC,mBAAoB,EACpBC,aAtCkBC,IAAkB,IAAjBC,SAAEA,GAAUD,EACnC9C,EAAe+C,IAsCXC,UAAWjD,EACXkD,mBAAoB,aACpBC,gBAAiB,WAEnBvB,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SACEE,KAAK,SACLC,YAAY,gBACZC,MAAO9B,EACP+B,SAtEsBC,IAC5B/B,EAAY+B,EAAEC,OAAOH,QAsEfmB,IAAI,IACJC,IAAK7B,IAEPI,IAAAC,cAAA,UAAQyB,QAtEeC,KAC3B,MAAMC,EAAaC,OAAOtD,GAAY,EAClCqD,GAAc,GAAKA,EAAahC,EAClCvB,EAAeuD,GAEfE,MAAM,yBAiEmC,MAAW,QCrF3CC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA3B,EAAA,GAAA3B,KAAAsD,EAAAC,KAAA,UAAqBvD,KAAKuC,IAAiD,IAAhDiB,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASrB,EACpEiB,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7C,IAAAC,cAACD,IAAM8C,WAAU,KACf9C,IAAAC,cAACnC,EAAG,QAORiE","file":"static/js/main.f2eda056.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';  // Import React and necessary hooks\nimport axios from 'axios';                          // Import axios for API requests\nimport ReactPaginate from 'react-paginate';         // Import ReactPaginate for pagination\nimport './App.css';                                 // Import your CSS file\n\nconst App = () => {\n  const [coins, setCoins] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);  // Current page state\n  const [coinsPerPage] = useState(10);\n  const [goToPage, setGoToPage] = useState('');  // New state for handling go-to-page input\n\n  useEffect(() => {\n    axios.get('https://api.coingecko.com/api/v3/coins/list')\n      .then(response => setCoins(response.data))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n    setCurrentPage(0);  // Reset to the first page when search term changes\n  };\n\n  const handleGoToPageChange = (e) => {\n    setGoToPage(e.target.value);  // Track the value of the input\n  };\n\n  const handleGoToPageSubmit = () => {\n    const pageNumber = Number(goToPage) - 1;  // Convert input to 0-indexed page number\n    if (pageNumber >= 0 && pageNumber < pageCount) {\n      setCurrentPage(pageNumber);  // Update the page if valid\n    } else {\n      alert(\"Invalid page number\");  // Optional: Alert if the page number is out of range\n    }\n  };\n\n  const filteredCoins = coins.filter(coin =>\n    coin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    coin.symbol.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const offset = currentPage * coinsPerPage;\n  const currentCoins = filteredCoins.slice(offset, offset + coinsPerPage);\n  const pageCount = Math.ceil(filteredCoins.length / coinsPerPage);\n\n  const handlePageClick = ({ selected }) => {\n    setCurrentPage(selected);  // Update the current page when pagination is clicked\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Crypto Table</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search by name or symbol...\"\n        value={searchTerm}\n        onChange={handleSearchChange}\n      />\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Symbol</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentCoins.map(coin => (\n            <tr key={coin.id}>\n              <td>{coin.id}</td>\n              <td>{coin.name}</td>\n              <td>{coin.symbol}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <ReactPaginate\n        previousLabel={'Previous'}\n        nextLabel={'Next'}\n        breakLabel={'...'}\n        pageCount={pageCount}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        forcePage={currentPage}\n        containerClassName={'pagination'}\n        activeClassName={'active'}\n      />\n      <div className=\"go-to-page\">\n        <input\n          type=\"number\"\n          placeholder=\"Go to page...\"\n          value={goToPage}\n          onChange={handleGoToPageChange}  // Track the input change\n          min=\"1\"\n          max={pageCount}\n        />\n        <button onClick={handleGoToPageSubmit}>Go</button>  {/* Button to trigger page change */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}